####################################
### CONFIGURATION FILE FOR JCELL ###
####################################

## Kind of algorithm
## Algorithm = cellular | generational | steady-state
#Algorithm = steady-state
Algorithm = generational
#Algorithm = cellular
#Algorithm = distributed

## Shape of population (x, y)
#Population = (10, 10)
#Population = (20, 20)
Population = 100

# number of islands in which the population is splitted
islandsNumber = 5

# Frequency of migration between islands
MigrationFreq = 10000

## Specify whether a hierarchy will be stablished into the population or not (default value is false)
#HierarchycalPop = true
HierarchycalPop = false

## Adaptive population shape?
#AdaptivePop = true
AdaptivePop = false
AdaptivePopPolicy = adaptiveCGA.AF

## show some information during the run?
#Verbose = true
Verbose = false

## Maximum allowed number of evaluations
#EvaluationsLimit = 30000
EvaluationsLimit = 100000000

## Kind of individuals
## Individual = jcell.RealIndividual | jcell.IntegerIndividual | jcell.PermutationIndividual | jcell.BinaryIndividual | TopIndividual
#Individual = jcell.RealIndividual
#Individual = jcell.IntegerIndividual
Individual = jcell.TopIndividual

## Mutation Probability (probability of applying mutation to an individual)
MutationProb = 1.0

## Crossover Probability
CrossoverProb = 1.0

## Selection policies: operators.selection.TournamentSelection | operators.selection.RouletteWheelSelection | operators.selection.LinearRankSelection |
##	operators.selection.CenterSelection | operators.selection.DisSimilarityTournamentSelection
SelectionParent1 = operators.selection.TournamentSelection
SelectionParent2 = operators.selection.TournamentSelection

## Crossover operator
## Crossover = operators.recombination.Ax | operators.recombination.BLXalpha | operators.recombination.Cx | operators.recombination.Dpx | operators.recombination.DX | operators.recombination.ELX | 
##		  operators.recombination.Erx | operators.recombination.FCBX | operators.recombination.FX | operators.recombination.LBGAX | operators.recombination.LX | operators.recombination.Ox
##		  operators.recombination.Pmx | operators.recombination.PNX | operators.recombination.Px | operators.recombination.SBX | operators.recombination.Spx | operators.recombination.WHX
Crossover = operators.recombination.Dpx

## Mutation operator
## Mutation = operators.mutation.BinaryMutation | operators.mutation.PolynomialMutation | operators.mutation.MuhlenbeinMutation | operators.mutation.TopMutation
##	operators.mutation.GaussianMutation | operators.mutation.FloatUniformMutation |  operators.mutation.FloatNonUniformMutation
##	operators.mutation.OneGeneMutation | operators.mutation.CauchyMutation
Mutation = operators.mutation.TopMutation


## Replacement policy
## Replacement = operators.replacement.ReplaceIfNonWorse | operators.replacement.ReplaceIfBetter | operators.replacement.ReplaceAlways
Replacement = operators.replacement.ReplaceIfNonWorse
#Replacement = operators.replacement.ReplaceIfBetter

## Problem to solve
Problem = problems.Combinatorial.TOP


## UpdatePolicy = 
##	Synchronous: for the synchronous cGA
##	Asynchronous LS: for the asynchronous cGA with the Line Sweep policy
##	Asynchronous FRS: for the asynchronous cGA with the Fixed Random Sweep policy
##	Asynchronous NRS: for the asynchronous cGA with the New Random Sweep policy
##	Asynchronous UC: for the asynchronous cGA with the Uniform Choice policy
##	Asynchronous SS: for the asynchronous cGA with the Spiral Sweep policy
UpdatePolicy = Asynchronous FRS
#UpdatePolicy = Synchronous


##############################################
## FOR SOLVING MULTI-OBJECTIVE PROBLEMS
##
## Only for the Multi-objective case
## Strategy for inserting new individuals in the pareto front
## ParetoManagement =
##	MO.Crowding: Policy originally implemented in NSGAII
##	MO.AdaptiveGrid: Policy originally implemented in PAES2
ArchiveManagement = MO.Crowding

## Only in the case of using AdaptiveGrid
Depth = 5

##
##############################################

##############################################
## Specific parameters for the displayed population

## Frequency (measured in generations) for updating the displayed population
DisplaySteps = 1

##
##############################################

##############################################
## Specific parameters Asynchronous hierarchical population

## Perform the swap operation asynchronously? (true = asynchronous; false = synchronous)
#AsynchSwap = true
AsynchSwap = false

## Frequency of swapping (measured in generations)
SwapFreq = 1

## Probability of swapping
SwapProb = 1.0

## Perform swap with an individual if it didn't change its position
##	during the last MovesForSwapping swap tries, even if it is better
## The default value is False
#SwapIfNoMoves = True
#MovesForSwapping = 10

##
##############################################



##############################################
## Specific parameters for the recombination
## operators

## pBias Parameter for AX recombination
pBiasAX = 0.5

## alpha parameter for BLXalpha
AlphaBLX = 0.5

## alpha parameter for PBX
AlphaPBX = 0.8

## lambda parameter for FCBX
LambdaFCBX = 0.35

## lambda and ro parameter for PNX
LambdaPNX = 0.35
RoPNX = 2.0

## pBias Parameter for PX recombination
pBiasPX = 0.5

## distributionIndex Parameter for SBX recombination
distributionIndexSBX = 20.0

##
##############################################

##############################################
## Specific parameters for the mutation
## operators

## distributionIndex parameter for polynomial mutation
distributionIndexPM = 20.0

## deviation parameter for Gaussian mutation
deviationGM = 1.0

## deviation parameter for Cauchy mutation
deviationCM = 1.0

##
##############################################
