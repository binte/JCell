/** * @author Bernabe Dorronsoro * * The problem must provide the following parameters: * 	  - variables: the number of variables of the problem *    - maxFitness: the optimum (or best known solution) of the problem *    - Target.maximize: set whether it is a maximization or minimization problem *    - minAllowedValues: Minimum allowed value for each gene   *    - maxAllowedValues: Maximum allowed value for each gene * * The problem: Maximum cut problem. Instance of 20 vertices (sparse) *  */
package problems.Combinatorial;
import jcell.*; //Use jcell package

public class MAXCUT20_01 extends Problem
{		public static final int longitCrom = 20; // Length of chromosomes	public static final double maxFitness = 10.119812; // Maximum Fitness Value	
    final static double[][] problema= {
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.359902, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.313702, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.848267, 0.000000, 0.000000, 0.000000, 0.287508, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.117489, 0.000000, 0.000000, 0.000000, 0.000000, 0.190953, 0.000000, 0.000000, 0.000000, 0.000000, 0.916311} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.848267, 0.000000, 0.000000, 0.000000, 0.084579, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.721013, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.084579, 0.000000, 0.000000, 0.000000, 0.000000, 0.863363, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.032054} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.764415, 0.000000, 0.495863, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.287508, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.109939, 0.000000, 0.000000, 0.000000, 0.167750, 0.000000, 0.000000, 0.000000} , 
{0.359902, 0.000000, 0.117489, 0.000000, 0.000000, 0.863363, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.928091, 0.000000, 0.000000, 0.118362, 0.000000, 0.000000, 0.969750} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.652776, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.764415, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.424253, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.109939, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.495863, 0.000000, 0.000000, 0.928091, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.190953, 0.000000, 0.721013, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.252964, 0.936165, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.652776, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.313702, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.167750, 0.118362, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.424253, 0.000000, 0.000000, 0.252964, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.936165, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} , 
{0.000000, 0.000000, 0.916311, 0.000000, 0.000000, 0.032054, 0.000000, 0.000000, 0.000000, 0.969750, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
};
    int cols = 20;
    public MAXCUT20_01(String dataFile)    {    	super(dataFile);    			variables = longitCrom;		super.maxFitness = maxFitness;    	Target.maximize = true;    }

    public Object eval(Individual ind)
    {
	BinaryIndividual bi = (BinaryIndividual)ind;
	double fitness = 0.0;

	for (int i=0; i<(cols-1); i++) {
	    for (int j=i; j<cols; j++) {
		if (bi.getBooleanAllele(i)^bi.getBooleanAllele(j)) {
		    fitness += problema[i][j];
		}
	    }
	}
	return new Double(fitness);
    }
}




